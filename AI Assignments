Assignment 1
graph = {
    '5':['3','7'],
    '3':['2','4'],
    '7':['8'],
    '2':[],
    '4':['8'],
    '8':[]
}

visited=[]
queue=[]

def bfs(visited,graph,node):
    
    visited.append(node)
    queue.append(node)
    
    while queue:
        m = queue.pop(0)
        print(m,end=" ")
        if m==f:
            break
        
        for n in graph[m]:
            if n not in visited:
                visited.append(n)
                queue.append(n)
                

f = input("Enter the number to search : ")
print("The bfs for the searching element is :")
bfs(visited,graph,'5')

visited=[]
queue=[]
def dfs(visited, graph, node,n):  
    if node not in visited:
        print (node,end=" ")
        visited.append(node)
        for neighbour in graph[node]:
            elem = visited.pop()
            visited.append(elem)
            if elem==n:
                break
            else:
                dfs(visited, graph, neighbour,n)
                
n=input("Enter the no. to be searched:")
print("Following is the Depth-First Search")
dfs(visited, graph, '5',n)

Assignment 2
import copy

from heapq import heappush, heappop

n = 3

row = [ 1, 0, -1, 0 ]
col = [ 0, -1, 0, 1 ]

class priorityQueue:
	
	def __init__(self):
		self.heap = []

	
	def push(self, k):
		heappush(self.heap, k)

	def pop(self):
		return heappop(self.heap)

	def empty(self):
		if not self.heap:
			return True
		else:
			return False

class node:
	
	def __init__(self, parent, mat, empty_tile_pos,
				cost, level):
					
		
		self.parent = parent

		self.mat = mat

		self.empty_tile_pos = empty_tile_pos

		self.cost = cost

		self.level = level

	def __lt__(self, nxt):
		return self.cost < nxt.cost

def calculateCost(mat, final) -> int:
	
	count = 0
	for i in range(n):
		for j in range(n):
			if ((mat[i][j]) and
				(mat[i][j] != final[i][j])):
				count += 1
				
	return count

def newNode(mat, empty_tile_pos, new_empty_tile_pos,
			level, parent, final) -> node:
				
	new_mat = copy.deepcopy(mat)

	x1 = empty_tile_pos[0]
	y1 = empty_tile_pos[1]
	x2 = new_empty_tile_pos[0]
	y2 = new_empty_tile_pos[1]
	new_mat[x1][y1], new_mat[x2][y2] = new_mat[x2][y2], new_mat[x1][y1]

	cost = calculateCost(new_mat, final)

	new_node = node(parent, new_mat, new_empty_tile_pos,
					cost, level)
	return new_node

# Function to print the N x N matrix
def printMatrix(mat):
	
	for i in range(n):
		for j in range(n):
			print("%d " % (mat[i][j]), end = " ")
			
		print()

def isSafe(x, y):
	
	return x >= 0 and x < n and y >= 0 and y < n

def printPath(root):
	
	if root == None:
		return
	
	printPath(root.parent)
	printMatrix(root.mat)
	print()

def solve(initial, empty_tile_pos, final):
	
	pq = priorityQueue()

	cost = calculateCost(initial, final)
	root = node(None, initial, empty_tile_pos, cost, 0)

	pq.push(root)

	while not pq.empty():

		minimum = pq.pop()
		
		if minimum.cost == 0:
			
			printPath(minimum)
			return

		for i in range(n):
			new_tile_pos = [
				minimum.empty_tile_pos[0] + row[i],
				minimum.empty_tile_pos[1] + col[i], ]
				
			if isSafe(new_tile_pos[0], new_tile_pos[1]):
				
				child = newNode(minimum.mat,
								minimum.empty_tile_pos,
								new_tile_pos,
								minimum.level + 1,
								minimum, final,)

				pq.push(child)

initial = [ [ 1, 2, 3 ],
			[ 5, 6, 0 ],
			[ 7, 8, 4 ] ]

final = [ [ 1, 2, 3 ],
		[ 5, 8, 6 ],
		[ 0, 7, 4 ] ]

empty_tile_pos = [ 1, 2 ]

solve(initial, empty_tile_pos, final)

Aiignment 3 Selection Sort
import sys
A = [64, 25, 12, 22, 11]
 
# Traverse through all array elements
for i in range(len(A)):
     
    # Find the minimum element in remaining
    # unsorted array
    min_idx = i
    for j in range(i+1, len(A)):
        if A[min_idx] > A[j]:
            min_idx = j
             
    # Swap the found minimum element with
    # the first element       
    A[i], A[min_idx] = A[min_idx], A[i]
 
# Driver code to test above
print ("Sorted array")
for i in range(len(A)):
    print("%d" %A[i],end=" ")
    
Assignment 3 Prims
import sys # Library for INT_MAX
 
class Graph():
 
    def __init__(self, vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]
                    for row in range(vertices)]
 
    def printMST(self, parent):
        print ("Edge \tWeight")
        for i in range(1, self.V):
            print (parent[i], "-", i, "\t", self.graph[i][parent[i]])
 
 
    def minKey(self, key, mstSet):
        min = sys.maxsize
        for v in range(self.V):
            if key[v] < min and mstSet[v] == False:
                min = key[v]
                min_index = v
        return min_index
 
    
    def primMST(self):
        key = [sys.maxsize] * self.V
        parent = [None] * self.V 
        key[0] = 0
        mstSet = [False] * self.V
        parent[0] = -1 
        for cout in range(self.V):
            u = self.minKey(key, mstSet)
            mstSet[u] = True
            for v in range(self.V):               
                if self.graph[u][v] > 0 and mstSet[v] == False and key[v] > self.graph[u][v]:
                        key[v] = self.graph[u][v]
                        parent[v] = u
        self.printMST(parent)
 
g = Graph(5)
g.graph = [ [0, 2, 0, 6, 0],
            [2, 0, 3, 8, 5],
            [0, 3, 0, 0, 7],
            [6, 8, 0, 0, 9],
            [0, 5, 7, 9, 0]]
 
g.primMST()

Assignment 4
def getList(dict):
    list = []
    for key in dict.keys():
        list.append(key)
          
    return list

colors = ['Red','Yellow','Blue','Violet','Green','Orange','Brown']
color_of_vertex = {}

graph = {
  'A' : ['B','C'],
  'B' : ['E', 'D'],
  'C' : ['D'],
  'E' : [],
  'D' : [],
}

vertex = getList(graph)


def check(v,color):
    for neighbour in graph.get(v):
        color_of_neighbour = color_of_vertex.get(neighbour)
        if color_of_neighbour == color:
            return False
    return True
    

def findColor(v):
    for color in colors:
        if check(v,color):
            return color
         
for v in vertex:
    
    color_of_vertex[v] = findColor(v)
    
print(color_of_vertex)

Aiignment 6
go:-
hypothesis(Patient,Disease),
write_list([Patient,' probably has ',Disease]),nl.

go :-
write('Sorry, I dont seem to be able to'),nl,
write('diagnose the disease.'),nl.

symptom(Patient,fever) :- 
verify(Patient," have a fever (y/n) ?").
symptom(Patient,rash) :- 
verify(Patient," have a rash (y/n) ?").
symptom(Patient,headache) :- 
verify(Patient," have a headache (y/n) ?").
symptom(Patient,runny_nose) :- 
verify(Patient," have a runny_nose (y/n) ?").
symptom(Patient,conjunctivitis) :- 
verify(Patient," have a conjunctivitis (y/n) ?").
symptom(Patient,cough) :- 
verify(Patient," have a cough (y/n) ?").
symptom(Patient,body_ache) :- 
verify(Patient," have a body_ache (y/n) ?").
symptom(Patient,chills) :- 
verify(Patient," have a chills (y/n) ?").
symptom(Patient,sore_throat) :- 
verify(Patient," have a sore_throat (y/n) ?").
symptom(Patient,sneezing) :- 
verify(Patient," have a sneezing (y/n) ?").
symptom(Patient,swollen_glands) :- 
verify(Patient," have a swollen_glands (y/n) ?").

ask(Patient,Question) :-
	write(Patient),write('do you'),write(Question),
	read(N),
	( (N == yes ; N == y)
      ->
       assert(yes(Question)) ;
       assert(no(Question)), fail).
	
:- dynamic yes/1,no/1.		
	
verify(P,S) :-
   (yes(S) -> true ;
    (no(S) -> fail ;
     ask(P,S))).
	 
undo :- retract(yes(_)),fail. 
undo :- retract(no(_)),fail.
undo.




hypothesis(Patient,common_cold) :-
symptom(Patient,headache),
symptom(Patient,sneezing),
symptom(Patient,sore_throat),
symptom(Patient,runny_nose),
symptom(Patient,chills).



hypothesis(Patient,flu) :-
symptom(Patient,fever),
symptom(Patient,headache),
symptom(Patient,body_ache),
symptom(Patient,conjunctivitis),
symptom(Patient,chills),
symptom(Patient,sore_throat),
symptom(Patient,runny_nose),
symptom(Patient,cough).





write_list([]).
write_list([Term| Terms]) :-
write(Term),
write_list(Terms).

response(Reply) :-
get_single_char(Code),
put_code(Code), nl,
char_code(Reply, Code).

Assignment B3
public class SampleApexClass {
	public Decimal myValue;
    public String myString = '';
    
    public static Decimal getCalculatedValue(Decimal f){
        Decimal myValue = (f - 32) * 5/3;
        System.debug('The Result is:' + myValue);
        return myValue;
    }
}

